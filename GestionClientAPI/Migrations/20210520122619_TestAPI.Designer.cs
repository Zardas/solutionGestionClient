// <auto-generated />
using System;
using GestionClientAPI.Models.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GestionClientAPI.Migrations
{
    [DbContext(typeof(gestionAPI_DBContext))]
    [Migration("20210520122619_TestAPI")]
    partial class TestAPI
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GestionClientAPI.Models.Abonnement", b =>
                {
                    b.Property<int>("AbonnementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DureeAbonnement")
                        .HasColumnType("int");

                    b.HasKey("AbonnementId");

                    b.ToTable("Abonnements");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbonnementId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manuel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PanierId")
                        .HasColumnType("int");

                    b.Property<int>("Prix")
                        .HasColumnType("int");

                    b.Property<int?>("SupportId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type_Article")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleId");

                    b.HasIndex("AbonnementId");

                    b.HasIndex("PanierId");

                    b.HasIndex("SupportId");

                    b.ToTable("Articles");

                    b.HasDiscriminator<string>("Type_Article").HasValue("est_article");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Compte", b =>
                {
                    b.Property<int>("CompteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomCompte")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompteId");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Facture", b =>
                {
                    b.Property<int>("FactureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEmission")
                        .HasColumnType("datetime2");

                    b.Property<int>("Montant")
                        .HasColumnType("int");

                    b.HasKey("FactureId");

                    b.HasIndex("CompteId");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Panier", b =>
                {
                    b.Property<int>("PanierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompteId")
                        .HasColumnType("int");

                    b.Property<int>("QuantiteProduit")
                        .HasColumnType("int");

                    b.HasKey("PanierId");

                    b.HasIndex("CompteId")
                        .IsUnique();

                    b.ToTable("Paniers");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Title = "Role1"
                        },
                        new
                        {
                            RoleId = 2,
                            Title = "Role2"
                        },
                        new
                        {
                            RoleId = 3,
                            Title = "Role3"
                        },
                        new
                        {
                            RoleId = 4,
                            Title = "Role4"
                        });
                });

            modelBuilder.Entity("GestionClientAPI.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            StockId = 1,
                            Titre = "stockClassique"
                        },
                        new
                        {
                            StockId = 2,
                            Titre = "stockNouveautes"
                        },
                        new
                        {
                            StockId = 3,
                            Titre = "stockAncien"
                        });
                });

            modelBuilder.Entity("GestionClientAPI.Models.Support", b =>
                {
                    b.Property<int>("SupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupportId");

                    b.HasIndex("CompteId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotDePasse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type_Utilisateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtilisateurId");

                    b.ToTable("Utilisateurs");

                    b.HasDiscriminator<string>("Type_Utilisateur").HasValue("est_utilisateur");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Produit", b =>
                {
                    b.HasBaseType("GestionClientAPI.Models.Article");

                    b.Property<int>("Capacite")
                        .HasColumnType("int");

                    b.Property<string>("Fabricant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasIndex("StockId");

                    b.HasDiscriminator().HasValue("est_produit");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Service", b =>
                {
                    b.HasBaseType("GestionClientAPI.Models.Article");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("est_service");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Administrateur", b =>
                {
                    b.HasBaseType("GestionClientAPI.Models.Utilisateur");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Administrateur_Mail");

                    b.Property<string>("NomAdministrateur")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("est_administrateur");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Client", b =>
                {
                    b.HasBaseType("GestionClientAPI.Models.Utilisateur");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("GestionnaireAssocieId")
                        .HasColumnType("int");

                    b.Property<int?>("GestionnaireUtilisateurId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Solde")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GestionnaireUtilisateurId");

                    b.HasDiscriminator().HasValue("est_client");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Gestionnaire", b =>
                {
                    b.HasBaseType("GestionClientAPI.Models.Utilisateur");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gain")
                        .HasColumnType("int");

                    b.Property<string>("NomGestionnaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.HasIndex("StockId")
                        .IsUnique()
                        .HasFilter("[StockId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("est_gestionnaire");

                    b.HasData(
                        new
                        {
                            UtilisateurId = 1,
                            Login = "Kenny",
                            MotDePasse = "XCD184U9dMf46s9eCzzHEsRhgnOmwc8LH7JslQ2+jVk=",
                            Email = "kMc@sp.ca",
                            Gain = 0,
                            NomGestionnaire = "McCormick",
                            RoleId = 1,
                            StockId = 3
                        },
                        new
                        {
                            UtilisateurId = 2,
                            Login = "Stan",
                            MotDePasse = "nuqhOWieLZIBaHuA4B5lM0hir40FI/ABHqyYlm+AL4I=",
                            Email = "sm@sp.ca",
                            Gain = 0,
                            NomGestionnaire = "Marsh",
                            RoleId = 2,
                            StockId = 1
                        },
                        new
                        {
                            UtilisateurId = 3,
                            Login = "Kyle",
                            MotDePasse = "+8LmkEKGrLy9Mo5DSNqSZmZOxt5G3Nq6hLKSXXnhSC0=",
                            Email = "kBr@sp.ca",
                            Gain = 0,
                            NomGestionnaire = "Broslovsky",
                            RoleId = 2,
                            StockId = 2
                        });
                });

            modelBuilder.Entity("GestionClientAPI.Models.Article", b =>
                {
                    b.HasOne("GestionClientAPI.Models.Abonnement", "Abonnement")
                        .WithMany("Articles")
                        .HasForeignKey("AbonnementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionClientAPI.Models.Panier", null)
                        .WithMany("Articles")
                        .HasForeignKey("PanierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionClientAPI.Models.Support", null)
                        .WithMany("Articles")
                        .HasForeignKey("SupportId");

                    b.Navigation("Abonnement");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Facture", b =>
                {
                    b.HasOne("GestionClientAPI.Models.Compte", "Compte")
                        .WithMany()
                        .HasForeignKey("CompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Panier", b =>
                {
                    b.HasOne("GestionClientAPI.Models.Compte", "Compte")
                        .WithOne("Panier")
                        .HasForeignKey("GestionClientAPI.Models.Panier", "CompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Support", b =>
                {
                    b.HasOne("GestionClientAPI.Models.Compte", "Compte")
                        .WithMany()
                        .HasForeignKey("CompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Produit", b =>
                {
                    b.HasOne("GestionClientAPI.Models.Stock", "Stock")
                        .WithMany("Produits")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Client", b =>
                {
                    b.HasOne("GestionClientAPI.Models.Gestionnaire", null)
                        .WithMany("ClientsAssocies")
                        .HasForeignKey("GestionnaireUtilisateurId");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Gestionnaire", b =>
                {
                    b.HasOne("GestionClientAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionClientAPI.Models.Stock", "Stock")
                        .WithOne("ResponsableStock")
                        .HasForeignKey("GestionClientAPI.Models.Gestionnaire", "StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Abonnement", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Compte", b =>
                {
                    b.Navigation("Panier");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Panier", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Stock", b =>
                {
                    b.Navigation("Produits");

                    b.Navigation("ResponsableStock");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Support", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("GestionClientAPI.Models.Gestionnaire", b =>
                {
                    b.Navigation("ClientsAssocies");
                });
#pragma warning restore 612, 618
        }
    }
}
